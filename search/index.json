[{"content":"Inazuma \r\rPhoto by 106996617\r\nWatatsumi \r\r ","date":"2022-01-27T00:00:00Z","image":"https://catmode.github.io/p/hugo-genshin/W_hue071edce1e0b06411550a761516a818e_4129023_120x120_fill_box_smart1_3.png","permalink":"https://catmode.github.io/p/hugo-genshin/","title":"HUGO媒体插入实例"},{"content":"《梦幻曲》舒曼 \r\n\r\n\r\r 《月光》德彪西 \r\n\r\n\r\n\r\n\r\n\r\n\r\r ","date":"2022-01-27T00:00:00Z","permalink":"https://catmode.github.io/p/piano/","title":"钢琴曲谱"},{"content":"注册FB 下载Oculus APP\n开发者模式\nhttps://developer.oculus.com/downloads/native-android/ 下载Oculus Developer Hub\nOculus开启开发者模式2021 10月版教程\n相信很多小伙伴们发现自己的Oculus APP上突然就没有了开发者权限这个选项，这是因为Oculus新政策导致的。因此在这里提供新的开启开发者模式的方法，此方法需要一根USB c口的数据线以及kx，这里就不提供kx的方法了。\r步骤如下：\r 输入以下网址https://developer.oculus.com/downloads/native-android/ 从中下载Oculus Developer Hub以下简称（ODH）对应操作系统的版本并安装。\n启动Oculus quest2，并用数据线连接至电脑，选择允许电脑读取。\n启动ODH，使用已经创建好的开发者账户登录（只需在借记卡和手机号里面选择一个验证过就可以了，验证的地址如下：https://developer.oculus.com/manage/verify/ 注册的教程网上太多了，此处不再赘述）\n进入软件后选择Device Manager -\u0026gt; Set Up New Device\n一直下一步，连接上能kx的WiFi，然后勾选Enable Developer Mode\n带上VR头盔，在里面选择允许此电脑使用USB调试之类的一个选项\n经过以上步骤，这台VR设备的开发者模式就开启完成了。\n","date":"2021-11-26T00:00:00Z","permalink":"https://catmode.github.io/p/oculus/","title":"Oculus开发账号"},{"content":"Twikoo 评论模块选择了Twikkoo，这里使用了Vercel 部署方式。详细参考Twikoo官方文档\nVercel 部署教程 \r\r创建MongoDB数据库   申请 MongoDB 账号\n  创建免费 MongoDB 数据库，区域推荐选择 AWS / N. Virginia (us-east-1)\n  在 Clusters 页面点击 CONNECT，按步骤设置允许所有 IP 地址的连接\n  创建数据库用户，并记录数据库连接字符串，请将连接字符串中的 \u0026lt;password\u0026gt; 修改为数据库密码\n   mongodb+srv://user:@cluster0.b5hay.mongodb.net/myFirstDatabase?retryWrites=true\u0026amp;w=majority\n 部署至Vercel   申请 Vercel 账号\n  点击这里将 Twikoo 一键部署到 Vercel\n  进入 Settings - Environment Variables，添加环境变量 MONGODB_URI，值为上方第 4 步的数据库连接字符串\n  进入 Overview，点击 Domains 下方的链接，如果环境配置正确，可以看到 “Twikoo 云函数运行正常” 的提示\n   Vercel Domains（包含 https:// 前缀，例如https://xxx.vercel.app）即为环境 id\n 前端部署  如果网站主题支持 Twikoo，只需在配置文件中指定 Twikoo 即可 如果网站主题不支持 Twikoo，需要修改源码手动引入 Twikoo 的 js 文件并初始化  在站点配置文件中修改部分如下：\ncomments:\renabled: true\rprovider: twikoo\r...\rtwikoo:\renvId: \u0026lt;添加Vercel Domains环境ID\u0026gt;\rregion:\rpath:\rlang:\r 版本更新   进入 Vercel 仪表板 - twikoo - Settings - Git\n  点击 Connected Git Repository 下方的仓库地址\n  打开 package.json，点击编辑\n  将 \u0026quot;twikoo-vercel\u0026quot;: \u0026quot;x.x.x\u0026quot; 其中的版本号修改为最新版本号。点击 Commit changes\n  部署会自动触发，可以回到 Vercel 仪表板 ，查看部署状态\n  设置头像 Twikoo默认自定义头像CDN为：Gravatar\n申请 Gravatar 账号，上传头像应用即可，之后用注册的邮箱评论就自带头像啦\n一起愉快的灌水吧！  HUGO食用指南\n 基础搭建及部署 添加音乐模板 添加评论模块  ","date":"2021-10-13T00:00:00Z","image":"https://catmode.github.io/p/hugo-comments/twikoo_hu0661149af5f14bdc73ea6fcb636f075f_4601_120x120_fill_box_smart1_3.png","permalink":"https://catmode.github.io/p/hugo-comments/","title":"HUGO食用指南 - 留言篇"},{"content":"Clash-TUN  Clash 在安装 wintun 插件后即可全局接管所有软件的流量，包括游戏。开启后请注意流量消耗情况，避免使用代理更新游戏导致流量耗尽。\n  下载 wintun 插件 打开 https://www.wintun.net/ 下载最新 wintun插件并解压。\n复制 wintun 插件 在 Clash 主页点击 Home Directory 右侧的 Open Folder 打开 Clash 的主目录。\n\r\n将上一步解压文件中的 /wintun/bin/amd64/wintun.dll 复制到这个目录。（不要选错到arm64）\n激活 wintun 插件 点击 Clash 首页 Service Mode 右侧的 Manage，再点击 Install。此时系统可能会弹出 UAC 提示，允许后 Clash 会自动重启。\n如重启后 Service Mode 右侧地球变为绿色，表示激活成功。\n\r\n开启 Mixin 点击 Clash 左侧 Settings，点击 Profile Mixin 下方 YAML 右侧 Edit。\n\r\n删除已有内容，替换为：\nmixin: dns: enable: true enhanced-mode: redir-host ipv6: false nameserver: - 119.29.29.29 - 1.2.4.8 - 1.1.1.1 - tls://223.5.5.5:853 - tls://223.6.6.6:853 fake-ip-range: 198.18.0.0/16 tun: enable: true stack: gvisor dns-hijack: - 198.18.0.2:53 macOS-auto-route: true macOS-auto-detect-interface: true 点击右下角保存图标。\n启动 TUN 模式 返回 Clash 主页，关闭 System Proxy 并开启 Mixin 即可，此时所有流量都会通过 Clash 进行分流。默认 rule 模式下，国内所有 ip 和域名均不会走代理服务器，但请尤其注意系统更新，游戏更新等流量。\n正确开启的情况下，系统会多出一个名为 Clash 的网卡。\n如需关闭 TUN 模式，首页关闭 Mixin 并开启 System Proxy 即可。\n ","date":"2021-10-09T00:00:00Z","permalink":"https://catmode.github.io/p/clash-tun/","title":"Clash - TUN"},{"content":"FHS Filesystem Hierarchy Standard（文件系统层次结构标准）\nLinux发行版所遵循的文件系统结构的统一标准\n\rLinux文件系统层次结构标准图\r\n 弧形： 目录\n方形： 常规文件\n菱形： 设备文件\n  / 根\n/bin 供所有用户使用的基本命令程序文件\n/sbin 供系统管理员使用的工具程序\n/boot 引导加载器必须用到的各种静态文件（kernel，initramfs(initrd)，grub等）\n/dev 存储特殊文件或设备文件\n 设备的两种类型：字符设备（线性设备，有时序）、块设备（随即设备，后发先制）\n 字符型设备：键盘，显示器 块设备：硬盘，内存   /etc 系统程序的静态配置文件\n/home 普通用户家目录的集中位置\n 一般每个普通的家目录默认为此目录下与用户名同名的子目录：/home/USERNAME\n /root 管理员的家目录\n/lib 为系统启动或跟文件系统上的应用程序（/bin，/sbin等）提供共享库，以及为内核提供内核模块\n 其中包含：\n libc.so.*： 动态链接的C库 ld*： 运行时链接器/加载器 modules： 用于存放内核模块的目录   /lib64 64位系统特有的存放64位共享库的路径\n/media 便携式设备挂载点：cdrom，floppy等\n/mnt 其他文件系统的临时挂载点\n/opt 附加第三方应用程序的安装位置\n/srv 当前主机为服务提供 的数据\n/tmp 为那些会产生临时文件的程序提供的用于存储临时文件的目录，可供左右有胡执行写入操作，有特殊权限\n/usr usr Hierarchy\n全局共享的只读数据路径\n 其中包含：\n bin，sbin lib，lib64 include：C程序头文件 share：命令手册页和命令自带文档等架构特有的文件的存储位置 local：另一个层级目录 X11R6：X-Windows程序的安装位置 src：程序源码文件的存储位置   /usr/local local Hierarchy\n让系统管理员安装本地应用程序，也通常用于安装第三方程序\n/var var Hierarchy\n存储常发生变化的数据的目录\n 其中包含：cache，lib，local，lock，log，opt，run，spool，tmp\n /proc 基于内存的虚拟文件系统，用于为内核及进程存储其相关信息，多为内核参数\n 例如：\nnet.ipv4.ip_forward\n虚拟为 net/ipv4/ip_forward，存储于 /proc/sysy/\n因此其完整路径为 /proc/sysy/net/ipv4/ip_forward\n /sys sysfs\n虚拟文件系统提供了一种比proc更为理想的访问内核数据的途径\n其主要作用在于为管理Linux设备提供一种统一模型的接口\n ","date":"2021-09-29T00:00:00Z","permalink":"https://catmode.github.io/p/linux-fhs/","title":"Linux目录介绍"},{"content":"网络设置 直连 配置网卡 vi /etc/sysconfig/network-scripts/ifcfg-ens33\r 修改：\n BOOTPROTO=dhcp ONBOOT=yes\n 新增：\n IPADDR=IP地址\nNETMASK=子网掩码\nGATWAY=网关\nDNS1=DNS\n 配置网络 vi /etc/sysconfig/network\r 新增：\n NETWORKING=yes\nHOSTNAME=默认为localhost.localdomain\nGATWAY=网关\n 重启网络 service network restart\r 查看配置 使用ifconfig查看网卡信息\n如果提示找不到该命令：\necho $PATH\t#查看当前环境变量\rls /sbin|grep ifconfig\t#根据环境变量查看指令\ryum search ifconfig\t#搜索ifconfig包\ryum install net-tools.x86_64\t#安装搜索到的对应包\r 代理 配置网络与开启Clash代理 相关配置Clash的教程见上篇文章\n配置网卡 vi /etc/profile\t#全局设置\rvi ~/.bashrc\t#仅设置当前账户\r 新增：\n # add proxy for network\nexport http_proxy=127.0.0.1:7890\nexport https_proxy=127.0.0.1:7890\nexport ftp_proxy=127.0.0.1:7890\n 或只新增：\n export ALL_PROXY=socks5://127.0.0.1:7890\n 保存：\nsource /ertc/profile\t#全局生效\rsource ~/.bashrc\t#当前账户生效\r  安装proxychains4 配置git 安装 sudo yum install git\r 如果git太慢，则需要给git挂代理\n直连 方法一： 使用nslookup查找github对应ip及域名后修改host\n 安装nslookup  使用yum查找并安装对应安装包：\nyum provides */nslookup\t#下载nslookup，查询软件包\ryum install -y bind-utils\t#安装查找到的bind-utils包\r  使用nslookup  查找github域名及对应ip地址：\nnslookup github.global.ssl.fastly.Net nslookup github.com\r  修改hosts  编辑hosts，添加查找到的github域名及ip地址：\nvi /etc/hosts\r  github.com IP\ngithub.global.ssl.fastly.Net IP\n 代理 方法二： 直接给git设置代理，需要局域网内clash主机开启流量转发\ngit config --global http.proxy ip:port\t#设置代理\rgit config --global --unset http.proxy\t#取消代理\r 配置proxychains4 安装 安装proxychains4\n使用git克隆：\ngit clone --depth=1 https://github.com/rofl0r/proxychains-ng.git\r 如果之前使用过这条命令，且提示未找到proxychains-ng包 删除刚刚下载的proxychains-ng包：\nrm -rf proxychains-ng\r 编译及安装：\ncd proxychains-ng\rsudo ./configure \u0026amp;\u0026amp; sudo make \u0026amp;\u0026amp; sudo make install\r 如果提示编译异常，需要安装gcc：\nsudo yum install gcc\r 再次执行编译及安装\n配置 安装配置文件：\nsudo make install-config\rsudo ln -s /usr/local/bin/proxychains4 /usr/bin/\r 修改配置文件：\nvi /usr/local/etc/proxychains.conf\r 在注释最后添加：\n socks4 127.0.0.1 9050\nsocks5 ip:port\n  可能需要将它拷贝到/etc/proxychains.conf路径下才能生效，默认为该目录或使用正常忽略即可\n  ","date":"2021-09-28T00:00:00Z","permalink":"https://catmode.github.io/p/linux-network/","title":"Linux网络及代理设置"},{"content":"局域网代理流量转发\u0026amp;设置 这里介绍的代理软件为Clash，本篇教程基于 Debian 11，CentOS 系基本大同小异可以作为参考\n教程适用于只有终端（SSH）的机器，如装有 GUI 图形界面，可以直接使用 Clash for Windows 的 Linux 版\n选择版本  https://github.com/Dreamacro/clash/releases\n 下载 wget https://github.com/Dreamacro/clash/releases/download/v1.6.5/clash-linux-amd64-v1.6.5.gz\r  注意： 版本号可能会变化，请勿照抄命令\n 如果提示以下信息：\nUnable to establish SSL connection  则需要给wget挂代理，编辑配置文件：\nvi /etc/wgetrc  添加配置信息：\nhttp_proxy = http://adress:port/\rhttps_proxy = http://adress:port/\rftp_proxy = http://adress:port/\r 若无法连接提示:\nfailed：Connection refused\r 则设置局域网中可使用Clash代理的主机进行局域网流量转发：\n  设置完成订阅链接及代理后（流量转发主机的代理能正常使用的情况下）进行下列步骤： 开启General - Allow LAN、System Proxy 默认端口7890，代理填写格式为流量转发的主机IP:7890，例：192.168.0.100:7890   解压 gunzip clash-linux-amd64-v1.6.5.gz\rchmod +x clash-linux-amd64-v1.6.5\r 配置 将clash订阅链接在这个网站转换后\nwget -O config.yaml \u0026quot;转换后的订阅链接\u0026quot;\r 修改 由于默认订阅配置没有设置密码，安全起见使用 nano / vim 等编辑器打开配置文件添加一行：\nsecret: \u0026quot;password\u0026quot;\r  将 password 替换为你想要设置的密码 将原有的 allow-lan: true 改为 allow-lan: false ，保存文件  运行 使用以下命令让 clash core 保持后台运行：\napt update\rapt install screen\rscreen -S clash\r./clash -f config.yaml\r 如一切正常会看到以下回显，按住 Ctrl 依次再按一下 A D 将 clash core 切换到后台\n INFO[0000] Start initial compatible provider * ****\n\u0026hellip;\n 设置 使用 nano / vim 等编辑器打开 ~/.bashrc ，在末尾添加一行：\nexport ALL_PROXY=\u0026quot;socks5://127.0.0.1:7891\u0026quot;\r 保存文件，打开这个网址 其中 Host 为 Linux 主机的 IP 地址，端口为 9090 ，密钥为第五步中设置的密码。填写妥当后点击确定。 在“代理”页面的“节点选择”和“漏网之鱼”分组选择任意服务器。\n 注意： 切换立即生效，无需保存。关闭网页不影响代理运行。 退出当前终端（SSH），重新连接即可生效。\n 测试 可以使用以下命令测试代理生效情况：\ncurl -I https://google.com\r 请注意 Ping 命令使用 ICMP 协议，默认不走代理\n ","date":"2021-09-27T00:00:00Z","image":"https://catmode.github.io/p/clash/logo_hu9de6bb2ad1464248651fbad983e7719a_38480_120x120_fill_box_smart1_3.png","permalink":"https://catmode.github.io/p/clash/","title":"Clash for Linux"},{"content":"ToDesk for Linux 版本 Fedora/CentOS/RedHat\n其他版本以官方网站为准\n下载 最新版本详见官网\nwget https://dl.todesk.com/linux/todesk_3.2.2_x86_64.rpm\r 安装 sudo rpm -Uvh todesk_3.2.2_x86_64.rpm\r 启动 todesk\r 如不能正常使用，则执行以下命令初始化：\nsudo systemctl stop todeskd.service sudo mv /opt/todesk/config/todeskd.conf /opt/todesk/config/todeskd.conf.bak sudo systemctl start todeskd.service  排查错误可执行以下命令：\ntail -f /var/log/todesk/todeskd.log\t#查看服务日志\rtail -f ~/.local/share/todesk/log/todesk.log\t#查看客户端日志\rrm ~/.config/todesk/todesk.cfg\t#删除客户端配置\rrm /opt/todesk/config/todeskd.conf\t#删除服务设置配置\r  ","date":"2021-09-27T00:00:00Z","image":"https://catmode.github.io/p/todesk/logo_hu3126559aa0a12ec1ab72b42eab8d77d4_37919_120x120_fill_box_smart1_3.png","permalink":"https://catmode.github.io/p/todesk/","title":"ToDesk for Linux"},{"content":"添加HUGO站点音乐 stack主题自带视频模板，支持bilibili、tencent、youtube及本地视频，本篇主要介绍如何添加音乐模板\n存放 自定义模板.html 的目录有以下两处：\n  一个为根目录下：\\layouts\\shortcodes\n  一个为主题目录下：\\themes\\hugo-theme-stack\\layouts\\shortcodes\n  两个路径添加其中之一即可\n本地音乐 添加模板 添加本地音乐.html模板：\n\u0026lt;h2\u0026gt;{{.Get 0}}\u0026lt;/h2\u0026gt; \u0026lt;audio controls autoplay loop preload=\u0026#34;none\u0026#34; src=\u0026#34;{{.Get 0}}\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Your browser does not support the \u0026lt;code\u0026gt;audio\u0026lt;/code\u0026gt; element.\u0026lt;/p\u0026gt; \u0026lt;/audio\u0026gt; Get 0：关闭自动播放\nGet 1：开启自动播放\n用法  在md中插入：   { {\u0026lt; music \u0026ldquo;music.mp3\u0026rdquo; \u0026ldquo;music\u0026rdquo; \u0026gt;} }\n 注意： 中括号{{、}}内无空格\n第一个参数表示歌曲的位置，第二个参数表示歌名\n本地音乐存放至对应md目录下\n效果 \rYour browser does not support the audio element.\n  网易云音乐 原生的hugo不支持iframe标签嵌入，所以无法支持网易云音乐的外链播放，但可以用自定义的方式添加自己的shortcode-templates\n添加模板 添加网易云音乐.html模板：\n{{ with .Get \u0026#34;id\u0026#34; }} \u0026lt;iframe frameborder=\u0026#34;no\u0026#34; border=\u0026#34;0\u0026#34; marginwidth=\u0026#34;0\u0026#34; marginheight=\u0026#34;0\u0026#34; width=60% height=86 src=\u0026#34;//music.163.com/outchain/player?type=2\u0026amp;id={{ . }}\u0026amp;auto=1\u0026amp;height=66\u0026#34;\u0026gt; \u0026lt;/iframe\u0026gt; {{ end }} 用法  在md中插入：   { {\u0026lt; neteasemusic id=\u0026ldquo;1234567890\u0026rdquo;\u0026gt;} }\n 注意： 中括号{{、}}内无空格\n效果 \r注意音量！  HUGO食用指南\n 基础搭建及部署 添加音乐模板 添加评论模块  ","date":"2021-09-26T00:00:00Z","image":"https://catmode.github.io/p/hugo-music/NetEase_hu2436c9441d3146829ff7bd4c9d33a23e_34094_120x120_fill_box_smart1_3.png","permalink":"https://catmode.github.io/p/hugo-music/","title":"HUGO食用指南 - 媒体篇"},{"content":"搭建基于Hugo的GitHub站点 Hugo简介  “Hugo，世界上最快的网站建设框架。”\n Hugo以Go编写，是根据Apache许可证2.0提供的开源静态站点生成器。 Hugo支持TOML、YAML和JSON数据文件类型、Markdown和HTML内容文件，并使用短代码添加丰富的内容。其他值得注意的功能包括分类学、多语言模式、图像处理、自定义输出格式、HTML/CSS/JS缩小以及对Sass SCSS工作流程的支持。 Hugo利用各种开源项目，非常适合博客、公司网站、创意作品集、在线杂志、单页应用程序，甚至数千页的网站，适用于那些想自己网站编写代码而不必担心设置复杂的运行时、依赖项和数据库的人。 使用Hugo构建的网站速度极快、安全，可以部署在任何地方，包括AWS、GitHub Pages、Heroku、Netlify和任何其他托管提供商。    安装Hugo Linux CentOS wget https://github.com/gohugoio/hugo/releases/download/v0.41/hugo_0.41_Linux-64bit.tar.gz\rtar -zxvf ./hugo_0.41_Linux-64bit.tar.gz\rcp ./hugo /usr/local/bin/\r MacOS brew安装 brew install hugo\r Windows Hugo官方文档中给出了choco和scoop两种安装方式\nchoco安装 1.使用powershell安装Chocolatey：\niex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://chocolatey.org/install.ps1\u0026#39;)) 2.查看choco版本验证安装：\nchoco version\r 3.使用choco安装hugo或hugo-extended：\nchoco install hugo -confirm choco install hugo-extended -confirm\r 4.如果安装hugo过程中速度过慢可配置choco代理：\nchoco config set proxy http://localhost:port\r scoop安装 1.使用powershell安装scoop：\niex (new-object net.webclient).downloadstring(\u0026#39;https://raw.githubusercontent.com/lukesampson/scoop/master/bin/install.ps1\u0026#39;) 2.使用scoop安装hugo或hugo-extended：\nscoop install hugo scoop install hugo-extended\r  部署Hugo 以GitHub Page为例：\n新建库 在GitHub内创建Repository，命名为username.github.io\n https://github.com/new\n 安装Git Windows\n 在Git官方网站下载运行安装   https://git-scm.com/downloads\n Linux\nyum install git\r 配置Git 1.设置user.name和user.email配置信息：\ngit config --global user.name [GitHub user.name] git config --global user.email [GitHub user.email]\r 2.生成ssh密钥文件，默认不需要设置密码：\nssh-keygen -t rsa -C [GitHub user.email]\r 3.找到生成的.ssh目录中的id_rsa.pub密钥，复制内容：\n Windows路径   C:\\Users\\user.ssh\\id_rsa\n  Linux路径   /home/user/.ssh/id_rsa\n 4.打开 https://github.com/settings/keys：\n新建new SSH Key，粘贴复制的id_rsa.pub密钥，点击Add SSH key\n5.检测GitHub公钥设置是否成功：\nssh git@github.com\r X.配置git代理\ngit config --global http.proxy http://localhost:port\t#设置git代理\rgit config --global --unset http.proxy\t#取消git代理\r 编辑~/.gitconfig查看git代理设置\n新建站点 在需要存放站点的目录下执行：\nhugo new site website\r 设置主题 1.在站点根目录克隆主题到站点根目录下的themes文件夹：（以当前stack主题为例，其他详见Hugo官方主题页面）\ngit clone https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack\r   具体站点配置以主题说明文档为准，这里使用的stack主题文档说明需要：\n 删除站点根目录下的config.toml默认配置 将该主题目录内的exampleSite文件夹里所有文件复制到站点根目录    2.运行本地服务：\nhugo server\r 这里报错无法启动服务，将提示错误的站点根目录\\content\\post\\rich-content\\index.md文件删除即可\n3.输入默认本地网址访问：\nlocalhost:1313 编辑路径 以当前stack主题为例，站点的各个常用编辑路径如下：\n\\站点根目录\\config.yaml\t#主站配置\r|\r|————\\static\\\t#图片目录\r|\r|————\\assets\\img\\\t#头像目录\r|\r|————\\content\\page\\\t|\t|\t|——about.md\t#关于页面\r|\t|\t|——archives.md\t#归档页面\r|\t|\t|——search.md\t#搜索页面\r|\t|\r|\t|——\\post\\\t#文档目录\r|\t|\r|\t|——\\categories\\\t#标签目录\r|\r|————\\themes\\\t#主题目录\r  推送站点到GitHub 首次部署推送 1.在站点根目录执行hugo命令生成最终页面：\nhugo\t 生成的文件默认存放在站点根目录下public目录中。如果未生成任何文章，去掉文章头部的 draft=true 再重新生成\n2.在生成的public目录下执行下列操作：\ngit init\rgit remote add origin \u0026quot;https://github.com/user/user.github.io\u0026quot;\rgit add -A\tgit commit -m \u0026quot;first commit\u0026quot;\rgit push -m origin master\r 3.至此你的站点就被推送到GitHub上了，输入你的GitHub站点网址查看：\n https://user.github.io\n 后期修改推送 1.将第一次生成后的public目录删除，并重新生成推送：\nhugo\rcd public\rgit init\rgit remote add origin \u0026quot;https://github.com/user/user.github.io\u0026quot;\r 2.此时可根据需要进行的操作选择对应指令：\ngit add -A\t#提交所有改动\rgit add -u #提交修改的和被删除的文件，不包括新文件\tgit add . #提交新文件和被修改的文件，不包括被删除文件\r 3.完成后执行下列操作：\ngit commit -m \u0026quot;update message\u0026quot;\rgit push -f origin master\r 4.输入GitHub站点网址查看：\n https://user.github.io\n 注意备份站点！  HUGO食用指南\n 基础搭建及部署 添加音乐模板 添加评论模块  ","date":"2021-09-21T00:00:00Z","image":"https://catmode.github.io/p/hugo/2560px-Logo_of_Hugo_the_static_website_generator.svg_hu1eca35fab2be5a61a943c0c4f6a621a8_107137_120x120_fill_box_smart1_3.png","permalink":"https://catmode.github.io/p/hugo/","title":"HUGO食用指南"}]